---
// Modern Hero Section for Kenkomed
---

<section id="inicio" class="relative min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Enhanced Background with Animated Gradient -->
  <div class="absolute inset-0 z-0">
    <div class="absolute inset-0 bg-gradient-to-r from-sky-950/80 via-primary-900/70 to-primary-700/70 animate-gradient-shift"></div>
    <!-- Animated mesh background -->
    <div class="absolute inset-0 opacity-10">
      <div class="absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.1)_1px,transparent_1px)] bg-[length:50px_50px] animate-mesh-move"></div>
    </div>
  </div>

  <!-- Floating Geometric Elements -->
  <div class="absolute inset-0 z-5 pointer-events-none">
    <!-- Large floating elements -->
    <div class="absolute top-20 left-10 w-32 h-32 bg-primary-400/10 rounded-full blur-xl animate-float-slow"></div>
    <div class="absolute top-40 right-20 w-24 h-24 bg-sky-400/15 rounded-full blur-lg animate-float-medium"></div>
    <div class="absolute bottom-32 left-20 w-20 h-20 bg-white/5 rounded-full blur-md animate-float-fast"></div>
    
    <!-- Medical cross elements -->
    <div class="absolute top-32 right-32 w-8 h-8 text-primary-300/30 animate-pulse-slow">
      <svg viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
    </div>
    
    <!-- DNA helix element -->
    <div class="absolute bottom-40 right-10 w-6 h-6 text-primary-200/20 animate-spin-slow">
      <svg viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
      </svg>
    </div>
  </div>

  <!-- Hero Content with Enhanced Animations -->
  <div class="relative z-10 text-center text-white max-w-5xl mx-auto px-4 sm:px-6 md:px-10 py-16 md:py-20 lg:py-28">
    <div class="space-y-6 sm:space-y-8">

      <!-- Animated Badge -->
      <div class="inline-flex items-center px-4 py-2 rounded-full bg-primary-600/20 border border-primary-400/30 backdrop-blur-sm animate-fade-in-up" style="animation-delay: 0.2s;">
        <span class="w-2 h-2 bg-primary-300 rounded-full mr-2 animate-pulse"></span>
        <span class="text-sm font-medium text-primary-100">Sistema DSS Avanzado</span>
      </div>

      <!-- Enhanced Main Heading with Typing Effect -->
      <h1 class="text-5xl sm:text-6xl md:text-7xl lg:text-7xl xl:text-8xl font-extrabold leading-tight animate-fade-in-up" style="animation-delay: 0.4s;">
        <span class="bg-gradient-to-r from-white via-primary-100 to-primary-200 bg-clip-text text-transparent animate-gradient-text">
          Kenkomed
        </span>
      </h1>
      
      <!-- Enhanced Subheading with Stagger Animation -->
      <div class="animate-fade-in-up" style="animation-delay: 0.6s;">
        <h2 class="text-lg sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl font-light text-primary-50 max-w-3xl mx-auto leading-relaxed">
          <span class="font-semibold text-white animate-text-glow">Sistema de Soporte a la Decisión Clínica</span> con 
          <span class="text-primary-200 font-medium relative">
            digitalización completa de registros médicos
            <div class="absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-primary-300 to-transparent animate-underline-expand"></div>
          </span>. 
          Optimiza el <span class="text-primary-200 font-medium relative">
            seguimiento personalizado
            <div class="absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-primary-300 to-transparent animate-underline-expand" style="animation-delay: 0.5s;"></div>
          </span> y mejora la calidad de atención en tu centro de salud.
        </h2>
      </div>

      <!-- Enhanced Mini Claim with Icon -->
      <div class="flex items-center justify-center gap-2 animate-fade-in-up" style="animation-delay: 0.8s;">
        <div class="w-5 h-5 text-primary-300 animate-bounce-subtle">
          <svg viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
        </div>
        <p class="text-sm sm:text-base md:text-lg text-primary-100 italic">
          Seguro, rápido y fácil de implementar en cualquier clínica o consultorio.
        </p>
      </div>

      <!-- Enhanced CTA Buttons with Modern Effects -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center pt-6 sm:pt-8 animate-fade-in-up" style="animation-delay: 1s;">
        <a href="/demo" class="group relative overflow-hidden border-2 border-white text-white px-6 sm:px-8 py-3 sm:py-4 rounded-full font-semibold text-base sm:text-lg transition-all duration-500 hover:scale-105 hover:shadow-2xl hover:shadow-white/20 inline-block">
          <span class="relative z-10 transition-colors duration-300 group-hover:text-primary-600">Ver Demo en Vivo</span>
          <div class="absolute inset-0 bg-white transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left"></div>
          <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
        </a>
        
        <button class="group relative overflow-hidden bg-primary-600 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-full font-semibold text-base sm:text-lg transition-all duration-500 hover:scale-105 hover:shadow-2xl hover:shadow-primary-600/40">
          <span class="relative z-10">Solicitar Información</span>
          <div class="absolute inset-0 bg-gradient-to-r from-primary-500 to-primary-700 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
        </button>
      </div>

    </div>
  </div>

  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10 animate-bounce">
    <div class="w-6 h-10 border-2 border-white/50 rounded-full flex justify-center">
      <div class="w-1 h-3 bg-white/70 rounded-full mt-2 animate-scroll-indicator"></div>
    </div>
  </div>
</section>

<style>
  /* Enhanced Animations */
  @keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes mesh-move {
    0% { transform: translate(0, 0); }
    100% { transform: translate(50px, 50px); }
  }

  @keyframes float-slow {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }

  @keyframes float-medium {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(120deg); }
  }

  @keyframes float-fast {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(90deg); }
  }

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes gradient-text {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes text-glow {
    0%, 100% { text-shadow: 0 0 5px rgba(255, 255, 255, 0.3); }
    50% { text-shadow: 0 0 20px rgba(255, 255, 255, 0.6), 0 0 30px rgba(255, 255, 255, 0.4); }
  }

  @keyframes underline-expand {
    from { width: 0; }
    to { width: 100%; }
  }

  @keyframes bounce-subtle {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
  }

  @keyframes pulse-slow {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.8; }
  }

  @keyframes spin-slow {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes scroll-indicator {
    0% { opacity: 1; transform: translateY(0); }
    100% { opacity: 0; transform: translateY(16px); }
  }

  /* Animation Classes */
  .animate-gradient-shift {
    animation: gradient-shift 8s ease infinite;
    background-size: 200% 200%;
  }

  .animate-mesh-move {
    animation: mesh-move 20s linear infinite;
  }

  .animate-float-slow {
    animation: float-slow 6s ease-in-out infinite;
  }

  .animate-float-medium {
    animation: float-medium 4s ease-in-out infinite;
  }

  .animate-float-fast {
    animation: float-fast 3s ease-in-out infinite;
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.8s ease-out forwards;
    opacity: 0;
  }

  .animate-gradient-text {
    animation: gradient-text 3s ease infinite;
    background-size: 200% 200%;
  }

  .animate-text-glow {
    animation: text-glow 2s ease-in-out infinite;
  }

  .animate-underline-expand {
    animation: underline-expand 1s ease-out forwards;
  }

  .animate-bounce-subtle {
    animation: bounce-subtle 2s ease-in-out infinite;
  }

  .animate-pulse-slow {
    animation: pulse-slow 3s ease-in-out infinite;
  }

  .animate-spin-slow {
    animation: spin-slow 8s linear infinite;
  }

  .animate-scroll-indicator {
    animation: scroll-indicator 2s ease-in-out infinite;
  }

  /* Counter Animation */
  .counter {
    transition: all 0.3s ease;
  }
</style>

<script>
  // Counter Animation
  function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    
    counters.forEach(counter => {
      const target = parseInt(counter.getAttribute('data-target'));
      const duration = 2000; // 2 seconds
      const increment = target / (duration / 16); // 60fps
      let current = 0;
      
      const updateCounter = () => {
        if (current < target) {
          current += increment;
          counter.textContent = Math.floor(current);
          requestAnimationFrame(updateCounter);
        } else {
          counter.textContent = target;
        }
      };
      
      // Start animation when element is visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updateCounter();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(counter);
    });
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', animateCounters);
</script>
